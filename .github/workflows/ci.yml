# ワークフローの名前
name: C++ CI/CD with Release

# このワークフローが実行されるタイミングを定義
on:
  # mainブランチへのpush時にリリース用に実行
  push:
    branches:
      - main
  # main/developにPRを送った時
  pull_request:
    branches:
      - main
      - develop

# 実行するジョブを定義
jobs:
  build-and-test:
    # Windowsの最新環境で実行
    runs-on: windows-latest    # ジョブのステップを定義
    steps:
      # 1. リポジトリのコードをチェックアウトする
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. GoogleTestのキャッシュ
      - name: Cache GoogleTest
        uses: actions/cache@v4
        with:
          path: build/_deps
          key: ${{ runner.os }}-googletest-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-googletest-

      # 4. cppcheckのインストール
      - name: Install cppcheck
        run: choco install cppcheck -y --force
        shell: pwsh

      # 5. CMakeの設定 (デバッグビルド)
      - name: Configure CMake (Debug)
        run: cmake -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      # 6. プロジェクトのビルド
      - name: Build project
        run: cmake --build build --config Debug


      # 8. テストの実行
      - name: Run tests
        run: ctest --test-dir build -C Debug

 # リリースを作成するジョブ
  release:
    # build-and-testジョブが成功したら実行
    needs: build-and-test
    # mainブランチへのpushイベントでのみ実行
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # Windowsの最新環境で実行
    runs-on: windows-latest
    steps:
      # 1. リポジトリのコードをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. CMakeの設定 (リリースビルド)
      - name: Configure CMake (Release)
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release

      # 3. プロジェクトのビルド (リリースビルド)
      - name: Build project
        run: cmake --build build --config Release

      # 4. バージョン番号からタグを生成
      - name: Generate Tag
        id: tag_generator
        run: echo "tag=v$(Get-Content -Path CMakeLists.txt | Select-String -Pattern 'project\(SDotPaint VERSION ([\d\.]+)\)' | ForEach-Object { $_.Matches[0].Groups[1].Value })" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8
        shell: pwsh

      # 5. GitHubリリースを作成
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_generator.outputs.tag }}
          release_name: Release ${{ steps.tag_generator.outputs.tag }}
          body: |
            自動リリースされた実行ファイルです。
          draft: false
          prerelease: false

      # 6. 実行ファイルをリリースにアップロード
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/Release/SDotPaint.exe # CMakeLists.txtのEXECUTABLE_NAMEに合わせてください
          asset_name: SDotPaint_win_x64.exe
          asset_content_type: application/vnd.microsoft.portable-executable