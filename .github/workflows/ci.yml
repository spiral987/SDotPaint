# ワークフローの名前
name: C++ CI

# このワークフローが実行されるタイミングを定義
on:
  # mainブランチへのpush時
  push:
    branches: [ "main" ]
  # mainブランチへのpull request作成・更新時
  pull_request:
    branches: [ "main" ]

# 実行するジョブを定義
jobs:
  # "build" という名前のジョブ
  build:
    # Windowsの最新環境で実行
    runs-on: windows-latest

    # ジョブのステップを定義    
    steps:
      # 1. リポジトリのコードをチェックアウトする
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Chocolateyキャッシュを復元
      - name: Cache Chocolatey packages
        uses: actions/cache@v4
        with:
          path: |
            C:\ProgramData\chocolatey\lib
            C:\tools
          key: ${{ runner.os }}-choco-${{ hashFiles('**/ci.yml') }}
          restore-keys: |
            ${{ runner.os }}-choco-

      # 3. CMakeビルドキャッシュを復元
      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: build
          key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-cmake-

      # 4. 静的解析ツールをインストール（キャッシュされていない場合のみ）
      - name: Install static analysis tools
        run: |
          if (-not (Get-Command clang-tidy -ErrorAction SilentlyContinue)) {
            Write-Host "Installing LLVM..."
            choco install llvm -y
          } else {
            Write-Host "LLVM already installed"
          }
          
          if (-not (Get-Command cppcheck -ErrorAction SilentlyContinue)) {
            Write-Host "Installing cppcheck..."
            choco install cppcheck -y
          } else {
            Write-Host "cppcheck already installed"
          }

      # 5. CMakeでビルドディレクトリを構成する
      #    -B build: 'build'という名前のビルドディレクトリを作成
      #    -DCMAKE_BUILD_TYPE=Debug: Debug構成で設定
      - name: Configure CMake
        run: cmake -B build -DCMAKE_BUILD_TYPE=Debug

      # 6. CMakeでプロジェクトをビルドする
      #    --build build: 'build'ディレクトリをビルド対象に指定
      #    --config Debug: Debug構成でビルド
      - name: Build project
        run: cmake --build build --config Debug

      # 7. 静的解析を実行
      - name: Run static analysis
        run: |
          # clang-tidyで静的解析
          Write-Host "Running clang-tidy..."
          Get-ChildItem -Path . -Filter "*.cpp" -Recurse | ForEach-Object {
            Write-Host "Analyzing: $($_.FullName)"
            clang-tidy $_.FullName -- -std=c++17
          }
          
          # cppcheckで静的解析
          Write-Host "Running cppcheck..."
          cppcheck --enable=all --std=c++17 --suppress=missingIncludeSystem .
        continue-on-error: true

      # 8. CTestを実行して単体テストを走らせる
      #    --test-dir build: 'build'ディレクトリ内のテストを実行
      #    --config Debug: Debug構成のテストを実行
      - name: Run tests
        run: ctest --test-dir build -C Debug