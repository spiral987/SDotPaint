# ワークフローの名前
name: C++ CI

# このワークフローが実行されるタイミングを定義
on:
  # mainブランチへのpush時
  push:
    branches: [ "main" ]
  # mainブランチへのpull request作成・更新時
  pull_request:
    branches: [ "main" ]

# 実行するジョブを定義
jobs:
  # "build" という名前のジョブ
  build:
    # Windowsの最新環境で実行
    runs-on: windows-latest    # ジョブのステップを定義
    steps:
      # 1. リポジトリのコードをチェックアウトする
      - name: Checkout repository
        uses: actions/checkout@v4

      # GoogleTestのダウンロードをキャッシュする
      # FetchContentでダウンロードされるライブラリをキャッシュすることで、
      # 毎回ダウンロードするのを防ぎ、Configure CMakeの時間を短縮します。
      - name: Cache GoogleTest
        uses: actions/cache@v4
        with:
          path: build/_deps
          key: ${{ runner.os }}-googletest-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-googletest-

      # ツールのインストールと環境変数の設定をまとめる 
      # ツールを一度にインストールし、GITHUB_ENVを使って後続のステップ全体で
      # PATHが有効になるようにします。
      - name: Install Tools and Set Environment
        run: |
          choco install llvm cppcheck -y --force
          $LLVM_PATH = "C:\Program Files\LLVM\bin"
          echo "PATH=$env:PATH;$LLVM_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "LLVM_PATH=$LLVM_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh
      
      # Configure、Build、Testはキャッシュの有無に関わらず実行します。
      # C++のビルドキャッシュは複雑なため、依存ライブラリのキャッシュが最も効果的です。
      - name: Configure CMake
        run: cmake -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Build project
        run: cmake --build build --config Debug
      
      # 改善点③：静的解析の実行方法を改善
      # clang-tidyにビルド構成を教え、cppcheckもエラーがあっても継続するようにします。
      - name: Run Static Analysis
        run: |
          echo "--- Running clang-tidy ---"
          clang-tidy --version
          # -p build を付けることで、CMakeが生成したコンパイル情報を使えるようになり、解析精度が向上します。
          clang-tidy-8.exe -p build $(Get-ChildItem -Path . -Filter "*.cpp" -Recurse | ForEach-Object { $_.FullName })

          echo "--- Running cppcheck ---"
          cppcheck --version
          cppcheck --enable=all --std=c++17 --suppress=missingIncludeSystem .
        continue-on-error: true # 静的解析でエラーが出てもワークフローを止めない

      - name: Run tests
        run: ctest --test-dir build -C Debug