# ワークフローの名前
name: C++ CI

# このワークフローが実行されるタイミングを定義
on:
  # mainブランチへのpush時
  push:
    branches: [ "main" ]
  # mainブランチへのpull request作成・更新時
  pull_request:
    branches: [ "main" ]

# 実行するジョブを定義
jobs:
  # "build" という名前のジョブ
  build:
    # Windowsの最新環境で実行
    runs-on: windows-latest    # ジョブのステップを定義
    steps:
      # 1. リポジトリのコードをチェックアウトする
      - name: Checkout repository
        uses: actions/checkout@v4

      # GoogleTestのダウンロードをキャッシュする
      # FetchContentでダウンロードされるライブラリをキャッシュすることで、
      # 毎回ダウンロードするのを防ぎ、Configure CMakeの時間を短縮します。
      - name: Cache GoogleTest
        uses: actions/cache@v4
        with:
          path: build/_deps
          key: ${{ runner.os }}-googletest-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-googletest-

      # 専用アクションでLLVMをキャッシュ付きでインストール
      - name: Install LLVM (for clang-tidy)
        uses: KyleMayes/install-llvm-action@v2
        with:
          # インストールしたいLLVMのメジャーバージョンを指定します。
          # '18' の部分を '17'などに変更することも可能です。
          version: "18"
          # このアクションがキャッシュを自動的に管理してくれます。
      
      # cppcheckは別途インストールします（必要であれば）
      # cppcheckをインストールし、そのパスを環境変数に追加する
      - name: Install cppcheck
        run: |
          choco install cppcheck -y --force
          # Cppcheckのデフォルトのインストールパスを定義
          $CPPCHECK_PATH = "C:\Program Files\Cppcheck"
          # GITHUB_ENVを使って、後続のステップでPATHが通るようにする
          echo "PATH=$env:PATH;$CPPCHECK_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      # Configure、Build、Testはキャッシュの有無に関わらず実行します。
      # C++のビルドキャッシュは複雑なため、依存ライブラリのキャッシュが最も効果的です。
      - name: Configure CMake
        run: cmake -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Build project
        run: cmake --build build --config Debug
      
      # 静的解析の実行方法を改善
      # clang-tidyにビルド構成を教え、cppcheckもエラーがあっても継続するようにします。
      - name: Run Static Analysis
        run: |
          echo "--- Running clang-tidy ---"
          clang-tidy --version
          # "-Exclude 'build/*'" を追加して、依存ライブラリを除外
          $filesToAnalyze = Get-ChildItem -Path . -Filter "*.cpp" -Recurse -Exclude 'build/*'
          if ($filesToAnalyze) {
            echo "Analyzing files: $($filesToAnalyze.FullName -join ', ')"
            # -p build を付けることで、CMakeが生成したコンパイル情報を使えるようになり、解析精度が向上します。
            clang-tidy.exe -p build $filesToAnalyze.FullName
          } else {
            echo "No .cpp files found to analyze (excluding build directory)."
          }
          echo "--- Running cppcheck ---"
          cppcheck --version
          cppcheck --enable=all --std=c++17 --suppress=missingIncludeSystem -i build .
        continue-on-error: true # 静的解析でエラーが出てもワークフローを止めない

      - name: Run tests
        run: ctest --test-dir build -C Debug
